defaults: &defaults
  working_directory: ~/build
  resource_class: large
  steps:
    - checkout
    - run:
        name: Save resolver field into file
        command: grep '^resolver:' ${STACK_FILE} > resolver.txt

    - restore_cache:
        keys:
          - v4-stack-cache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "resolver.txt" }}

    # Looking for the string [skip circleci] in all the json returned by https://docs.github.com/en/rest/reference/pulls#get-a-pull-request
    - run:
        name: Skip ci setup
        command: |
          set +e
          echo "CIRCLE_PULL_REQUEST: $CIRCLE_PULL_REQUEST"
          if [[ ! -z $CIRCLE_PULL_REQUEST ]]; then
            PULL_REQUEST_URL=${CIRCLE_PULL_REQUEST/github.com/api.github.com/repos}
            PULL_REQUEST_URL=${PULL_REQUEST_URL/pull/pulls}
            echo "PULL_REQUEST_URL: $PULL_REQUEST_URL"
            SKIP_CI=$(curl $PULL_REQUEST_URL | grep -o "\\[skip circleci\\]")
            if [[ -z "$SKIP_CI" ]]; then
              PULL_REQUEST_COMMENTS_URL=${PULL_REQUEST_URL/pulls/issues}/comments
              echo "PULL_REQUEST_COMMENTS_URL: $PULL_REQUEST_COMMENTS_URL"
              SKIP_CI=$(curl $PULL_REQUEST_COMMENTS_URL | grep -o "\\[skip circleci\\]")
            fi
            echo "SKIP_CI: $SKIP_CI"
          fi
          echo "export SKIP_CI=$SKIP_CI" >> $BASH_ENV

    - run:
        name: Build
        command: |
          if [[ -z "$SKIP_CI" ]]; then
            stack -j4 --stack-yaml=${STACK_FILE} install --system-ghc --no-terminal
          fi
        no_output_timeout: 30m

    - run:
        name: Build Testsuite without running it
        command: |
          if [[ -z "$SKIP_CI" ]]; then
            stack -j4 --stack-yaml=${STACK_FILE} build --system-ghc --test --no-run-tests --no-terminal
          fi
        no_output_timeout: 30m

    - store_artifacts:
        path: ~/.local/bin
        destination: bin

    - save_cache:
        key: v4-stack-cache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "resolver.txt" }}
        paths:
          - ~/.stack

version: 2
jobs:
  stackage-lts22:
    docker:
      - image: haskell:9.6.5-slim-buster
    environment:
      - STACK_FILE: "stack-lts22.yaml"
    <<: *defaults

  stackage-nightly:
    docker:
      - image: haskell:9.8.2-slim-buster
    environment:
      - STACK_FILE: "stack.yaml"
    <<: *defaults

workflows:
  version: 2
  multiple-ghcs:
    jobs:
      - stackage-lts22
      - stackage-nightly
