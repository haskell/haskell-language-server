name: Builds

defaults:
  run:
    shell: bash

on:
  release:
    types: [created]

jobs:

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ['9.0.1', '8.10.5', '8.10.4', '8.10.3', '8.10.2', '8.8.4', '8.8.3', '8.6.5', '8.6.4']
        os: [ubuntu-18.04, macOS-latest, windows-latest]
        exclude:
          - os: windows-latest
            ghc: '8.10.2' # broken due to https://gitlab.haskell.org/ghc/ghc/-/issues/18550
          - os: windows-latest
            ghc: '8.8.4' # also fails due to segfault :(
          - os: windows-latest
            ghc: '8.8.3' # fails due to segfault
        include:
          - os: windows-latest
            ghc: '8.10.2.2' # only available for windows and choco

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: haskell/actions/setup@v1
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: '3.4'

    - if: ${{ matrix.ghc == '9.0.1' }}
      name: Use modified cabal.project for ghc9
      run: cp cabal-ghc901.project cabal.project

    - name: Shorten binary names
      run: |
        sed -i.bak -e 's/haskell-language-server/hls/g' \
                   -e 's/haskell_language_server/hls/g' \
                   haskell-language-server.cabal cabal.project
        sed -i.bak -e 's/Paths_haskell_language_server/Paths_hls/g' \
                   src/**/*.hs exe/*.hs

    - name: Set some window specific things
      if: matrix.os == 'windows-latest'
      env:
        GHC_VER: ${{ matrix.ghc }}
      run: |
        echo "EXE_EXT=.exe" >> $GITHUB_ENV
        # We normalize windows+choco ghc version 8.10.2.2
        GHC_VER=$(echo $GHC_VER | sed 's/8.10.2.2/8.10.2/g')
        echo "GHC_VERSION=$GHC_VER" >> $GITHUB_ENV

    - name: Set some linux specific things
      if: matrix.os == 'ubuntu-18.04'
      env:
        GHC_VER: ${{ matrix.ghc }}
      run: |
        echo "LINUX_CABAL_ARGS=--enable-executable-static --ghc-options=-split-sections" >> $GITHUB_ENV
        echo "GHC_VERSION=$GHC_VER" >> $GITHUB_ENV

    - name: Set some macOs specific things
      if: matrix.os == 'macOS-latest'
      env:
        GHC_VER: ${{ matrix.ghc }}
      run: |
        echo "GHC_VERSION=$GHC_VER" >> $GITHUB_ENV

    - name: Workaround for GHC 8.10.5 on macOS
      if: matrix.os == 'macOS-latest' && matrix.ghc == '8.10.5'
      run: |
        echo "# uninstalling CommandLineTools (see https://github.com/haskell/haskell-language-server/issues/1913#issuecomment-861667786)"
        sudo rm -rf /Library/Developer/CommandLineTools

    - name: Build Server
      # Try building it twice in case of flakey builds on Windows
      run: |
        cabal build exe:hls -O2 $LINUX_CABAL_ARGS || \
        cabal build exe:hls -O2 $LINUX_CABAL_ARGS -j1

    - name: Compress Server Binary
      id: compress_server_binary
      run: |
        HLS_BUILD=$(find dist-newstyle \( -name 'hls' -o -name 'hls.exe' \) -type f)
        HLS=haskell-language-server-${{env.GHC_VERSION}}
        mv $HLS_BUILD $HLS${{env.EXE_EXT}}
        if [[ "$OSTYPE" == "msys" ]]; then
          7z a $HLS.zip $HLS${{env.EXE_EXT}}
          echo ::set-output name=path::$HLS.zip
          echo ::set-output name=content_type::application/zip
          echo ::set-output name=extension::zip
        else
          gzip --best $HLS
          echo ::set-output name=path::$HLS.gz
          echo ::set-output name=content_type::application/gzip
          echo ::set-output name=extension::gz
        fi

    - name: Upload Server Binary
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.compress_server_binary.outputs.path }}
        asset_name: haskell-language-server-${{ runner.OS }}-${{ env.GHC_VERSION }}${{env.EXE_EXT}}.${{ steps.compress_server_binary.outputs.extension }}
        asset_content_type: ${{ steps.compress_server_binary.outputs.content_type }}

    - uses: actions/upload-artifact@v2
      with:
        name: haskell-language-server-${{ runner.OS }}-${{ matrix.ghc }}${{env.EXE_EXT}}.${{ steps.compress_server_binary.outputs.extension }}
        path: ${{ steps.compress_server_binary.outputs.path }}

    - name: Build Wrapper
      if: matrix.ghc == '8.10.4'
      run: cabal build exe:hls-wrapper -O2 $LINUX_CABAL_ARGS

    - name: Compress Wrapper Binary
      if: matrix.ghc == '8.10.4'
      id: compress_wrapper_binary
      run: |
        HLS_WRAPPER_BUILD=$(find dist-newstyle \( -name 'hls-wrapper' -o -name 'hls-wrapper.exe' \) -type f)
        HLS_WRAPPER=haskell-language-server-wrapper
        mv $HLS_WRAPPER_BUILD $HLS_WRAPPER${{env.EXE_EXT}}
        if [[ "$OSTYPE" == "msys" ]]; then
          7z a $HLS_WRAPPER.zip $HLS_WRAPPER${{env.EXE_EXT}}
          echo ::set-output name=path::$HLS_WRAPPER.zip
          echo ::set-output name=content_type::application/zip
          echo ::set-output name=extension::zip
        else
          gzip --best $HLS_WRAPPER
          echo ::set-output name=path::$HLS_WRAPPER.gz
          echo ::set-output name=content_type::application/gzip
          echo ::set-output name=extension::gz
        fi

    - name: Upload Wrapper
      if: matrix.ghc == '8.10.4'
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.compress_wrapper_binary.outputs.path }}
        asset_name: haskell-language-server-wrapper-${{ runner.OS }}${{env.EXE_EXT}}.${{ steps.compress_wrapper_binary.outputs.extension }}
        asset_content_type: ${{ steps.compress_wrapper_binary.outputs.content_type}}

    - uses: actions/upload-artifact@v2
      if: matrix.ghc == '8.10.4'
      with:
        name: haskell-language-server-wrapper-${{ runner.OS }}${{env.EXE_EXT}}.${{ steps.compress_wrapper_binary.outputs.extension }}
        path: ${{ steps.compress_wrapper_binary.outputs.path }}

  # this generates .gz tarfiles containing all the GHC versions for
  # macOS and Linux, used by ghcup
  tar:
    needs: build
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        os: [Linux, macOS, Windows]
    steps:
      - uses: actions/download-artifact@v2

      - run: |
          # move the binaries for the specific platform into bin/
          mkdir bin
          mv haskell-language-server-${{ matrix.os }}-*/* bin
          mv haskell-language-server-wrapper-${{ matrix.os }}.*/* bin
          # decompress them
          cd bin
          if [[ "${{ matrix.os }}" == "Windows" ]]; then
            7z x "*.zip"
            rm *.zip
          else
            gzip -d *.gz
          fi
          tar -czpf haskell-language-server.tar.gz *

      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: bin/haskell-language-server.tar.gz
          asset_name: haskell-language-server-${{ matrix.os }}-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip

      - uses: actions/upload-artifact@v2
        with:
          name: haskell-language-server-${{ matrix.os }}-${{ github.event.release.tag_name }}.tar.gz
          path: bin/haskell-language-server.tar.gz

  sha256sum:
    needs: tar
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/download-artifact@v2

      - run: |
          # generate sha256 sums for all current artifacts
          sha256sum --tag haskell-language-server*/* >> SHA256SUMS
          # we clean up tags to match the release file names
          sed -i 's/\/.*)/)/g' SHA256SUMS

      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: SHA256SUMS
          asset_name: SHA256SUMS
          asset_content_type: plain/text

      - uses: actions/upload-artifact@v2
        with:
          name: SHA256SUMS
          path: SHA256SUMS
