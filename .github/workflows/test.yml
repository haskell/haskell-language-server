name: Testing

defaults:
  run:
    shell: bash

on:
  pull_request:
    branches:
      - '**'

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      should_skip_ghcide: ${{ steps.skip_ghcide_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.0
        with:
          cancel_others: true
          paths_ignore: '["**/docs/**", "**.md", "**/LICENSE", ".circleci/**", "install/**", "**.nix", "flake.lock"]'
      # If we only change ghcide downstream packages we have not test ghcide itself
      - id: skip_ghcide_check
        uses: fkirc/skip-duplicate-actions@v3.4.0
        with:
          paths_ignore: '["hls-test-utils/**", "plugins/**", "src/**", "exe/**", "test/**", "shake-bench/**"]'

  test:
    needs: pre_job
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        ghc: ["9.0.1", "8.10.5", "8.10.4", "8.10.3", "8.10.2", "8.8.4", "8.8.3", "8.6.5", "8.6.4"]
        os: [ubuntu-latest, macOS-latest]
        include:
          # only test supported ghc major versions
          - os: ubuntu-latest
            ghc: '9.0.1'
            test: true
          - os: ubuntu-latest
            ghc: '8.10.5'
            test: true
          - os: ubuntu-latest
            ghc: '8.8.4'
            test: true
          - os: ubuntu-latest
            ghc: '8.6.5'
            test: true
          - os: windows-latest
            ghc: '9.0.1'
            test: true
          - os: windows-latest
            ghc: '8.10.5'
            test: true
          - os: windows-latest
            ghc: '8.6.5'
            test: true
          # only build rest of supported ghc versions for windows
          - os: windows-latest
            ghc: '8.10.4'
          - os: windows-latest
            ghc: '8.10.3'
          - os: windows-latest
            ghc: '8.10.2.2'
          # This build get stuck frequently
          # - os: windows-latest
          #   ghc: '8.6.4'

    steps:
      - if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
        uses: actions/checkout@v2
        with:
          submodules: true
      - if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
        uses: haskell/actions/setup@v1
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: "3.4"

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
        run: ./fmt.sh
        name: "HLint via ./fmt.sh"

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' && matrix.os == 'windows-latest'}}
        name: Set some window specific things
        run: |
          echo "CABAL_STORE_DIR=$SYSTEMDRIVE\\SR" >> $GITHUB_ENV
          echo "CABAL_PKGS_DIR=~\\AppData\\cabal\\packages" >> $GITHUB_ENV

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' && matrix.os != 'windows-latest'}}
        name: Set some linux/macOS specific things
        run: |
          echo "CABAL_STORE_DIR=~/.cabal/store" >> $GITHUB_ENV
          echo "CABAL_PKGS_DIR=~/.cabal/packages" >> $GITHUB_ENV

      - name: Tentative Workaround for GHC 8.10.5 on macOS
        if: matrix.os == 'macOS-latest' && matrix.ghc == '8.10.5'
        run: |
          echo "# uninstalling CommandLineTools (see https://github.com/haskell/haskell-language-server/issues/1913#issuecomment-861667786)"
          sudo rm -rf /Library/Developer/CommandLineTools

      # Needs to be before Cache Cabal so the cache can detect changes to the modified cabal.project file
      - if: ${{ needs.pre_job.outputs.should_skip != 'true' && matrix.ghc == '9.0.1' }}
        name: Use modified cabal.project for ghc9
        run: cp cabal-ghc901.project cabal.project

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
        name: Cache Cabal
        uses: actions/cache@v2
        env:
          cache-name: cache-cabal
        with:
          path: |
            ${{ env.CABAL_PKGS_DIR }}
            ${{ env.CABAL_STORE_DIR }}
          key: v2-${{ runner.os }}-${{ matrix.ghc }}-build-${{ hashFiles('cabal.project') }}
          restore-keys: |
            v2-${{ runner.os }}-${{ matrix.ghc }}-bench-${{ hashFiles('cabal.project') }}
            v2-${{ runner.os }}-${{ matrix.ghc }}-build-
            v2-${{ runner.os }}-${{ matrix.ghc }}

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
        run: cabal update

      # Need this to work around filepath length limits in Windows
      - if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
        name: Shorten binary names
        run: |
          sed -i.bak -e 's/haskell-language-server/hls/g' \
                     -e 's/haskell_language_server/hls/g' \
                     haskell-language-server.cabal cabal.project
          sed -i.bak -e 's/Paths_haskell_language_server/Paths_hls/g' \
                     src/**/*.hs exe/*.hs

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
        name: Build
        # Retry it three times to workaround compiler segfaults in windows
        run: cabal build || cabal build || cabal build

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' &&  needs.pre_job.outputs.should_skip_ghcide != 'true' && matrix.test }}
        name: Test ghcide
        # run the tests without parallelism to avoid running out of memory
        run: cabal test ghcide --test-options="-j1 --rerun-update" || cabal test ghcide --test-options="-j1 --rerun" || LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true cabal test ghcide --test-options="-j1 --rerun"

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' && matrix.test }}
        name: Test func-test suite
        env:
          HLS_TEST_EXE: hls
          HLS_WRAPPER_TEST_EXE: hls-wrapper
        # run the tests without parallelism, otherwise tasty will attempt to run
        # all functional test cases simultaneously which causes way too many hls
        # instances to be spun up for the poor github actions runner to handle
        run: cabal test func-test --test-options="-j1 --rerun --rerun-update" || cabal test func-test --test-options="-j1 --rerun" || LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true cabal test func-test --test-options="-j1 --rerun"

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' && matrix.test }}
        name: Test wrapper-test suite
        env:
          HLS_TEST_EXE: hls
          HLS_WRAPPER_TEST_EXE: hls-wrapper
        # run the tests without parallelism, otherwise tasty will attempt to run
        # all functional test cases simultaneously which causes way too many hls
        # instances to be spun up for the poor github actions runner to handle
        run: cabal test wrapper-test --test-options="-j1" || cabal test wrapper-test --test-options="-j1" || cabal test wrapper-test --test-options="-j1"

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' && matrix.test && matrix.ghc != '9.0.1' }}
        name: Test hls-brittany-plugin
        run: cabal test hls-brittany-plugin --test-options="-j1 --rerun-update" || cabal test hls-brittany-plugin --test-options="-j1 --rerun" || LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true cabal test hls-brittany-plugin --test-options="-j1 --rerun"

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' && matrix.test && matrix.ghc != '9.0.1' }}
        name: Test hls-class-plugin
        run: cabal test hls-class-plugin --test-options="-j1 --rerun-update" || cabal test hls-class-plugin --test-options="-j1 --rerun" || LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true cabal test hls-class-plugin --test-options="-j1 --rerun"

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' && matrix.test && matrix.ghc }}
        name: Test hls-eval-plugin
        run: cabal test hls-eval-plugin --test-options="-j1 --rerun-update" || cabal test hls-eval-plugin --test-options="-j1 --rerun" || LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true cabal test hls-eval-plugin --test-options="-j1 --rerun"

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' && matrix.test }}
        name: Test hls-haddock-comments-plugin
        run: cabal test hls-haddock-comments-plugin --test-options="-j1 --rerun-update" || cabal test hls-haddock-comments-plugin --test-options="-j1 --rerun" || LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true cabal test hls-haddock-comments-plugin --test-options="-j1 --rerun"

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' && matrix.test && matrix.ghc != '9.0.1' }}
        name: Test hls-splice-plugin
        run: cabal test hls-splice-plugin --test-options="-j1 --rerun-update" || cabal test hls-splice-plugin --test-options="-j1 --rerun" || LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true cabal test hls-splice-plugin --test-options="-j1 --rerun"

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' && matrix.test && matrix.ghc != '9.0.1' }}
        name: Test hls-stylish-haskell-plugin
        run: cabal test hls-stylish-haskell-plugin --test-options="-j1 --rerun-update" || cabal test hls-stylish-haskell-plugin --test-options="-j1 --rerun" || LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true cabal test hls-stylish-haskell-plugin --test-options="-j1 --rerun"

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' && matrix.test && matrix.ghc != '9.0.1' }}
        name: Test hls-fourmolu-plugin
        run: cabal test hls-fourmolu-plugin --test-options="-j1 --rerun-update" || cabal test hls-fourmolu-plugin --test-options="-j1 --rerun" || LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true cabal test hls-fourmolu-plugin --test-options="-j1 --rerun"

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' && matrix.test && matrix.ghc != '9.0.1' }}
        name: Test hls-tactics-plugin test suite
        run: cabal test hls-tactics-plugin --test-options="-j1 --rerun-update" || cabal test hls-tactics-plugin --test-options="-j1 --rerun" || LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true cabal test hls-tactics-plugin --test-options="-j1 --rerun"

      - if: ${{ needs.pre_job.outputs.should_skip != 'true' && matrix.test && matrix.ghc != '9.0.1' }}
        name: Test hls-refine-imports-plugin test suite
        run: cabal test hls-refine-imports-plugin --test-options="-j1 --rerun-update" || cabal test hls-refine-imports-plugin --test-options="-j1 --rerun" || LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true cabal test hls-refine-imports-plugin --test-options="-j1 --rerun"
