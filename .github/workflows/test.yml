name: Testing

defaults:
  run:
    shell: bash

# See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency.
concurrency:
  group: ${{ github.head_ref }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - '**'

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      ghcs: ${{ steps.matrix-inputs.outputs.ghcs }}

    steps:
      # Need the repo checked out in order to read the files
      - uses: actions/checkout@v3

      - id: matrix-inputs
        run: |
          echo "ghcs=$(cat ./.github/workflows/supported-ghc-versions.json)" >> $GITHUB_OUTPUT

      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.3.0
        with:
          cancel_others: false
          paths_ignore: '[ "**/docs/**"
                         , "**.md"
                         , "**/LICENSE"
                         , "**.nix"
                         , "flake.lock"
                         , "**.yml"
                         , "**.yaml"
                         , ".circleci/**"
                         , ".gitlab/**"
                         , ".github/**"
                         ]'

  test:
    if: needs.pre_job.outputs.should_skip != 'true'
    needs:
      - pre_job
    runs-on: ${{ matrix.os }}
    strategy:
      # We don't want to fail fast.
      # We used to fail fast, to avoid caches of failing PRs to overpopulate the CI
      # caches, evicting known good build caches.
      # However, PRs do not cache anything any more, and can only use the caches from current master.
      # See 'caching.yml' for our caching set up.
      fail-fast: false
      matrix:
        ghc: ${{ fromJSON(needs.pre_job.outputs.ghcs) }}
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
        include:
          # Test all supported versions, but skip testing on macos as it's similar to linux
          - os: ubuntu-latest
            test: true
          - os: windows-latest
            test: true

    steps:
      - uses: actions/checkout@v3

      - name: Determine packages to build
        run: |
          # filter out the packages based on which ones have the current GHC in their 'excluded_ghcs'
          SELECTED_PKGS=$(cat ./.github/workflows/packages.json | jq -c '[.[] | select(any(.excluded_ghcs[] ; contains("${{ matrix.ghc }}")) | not) | .package]')
          # just get all the pacakge names
          ALL_PKGS=$(cat ./.github/workflows/packages.json | jq -c '[.[] | .package]')

          # compute the difference between the two to allow us to list which ones are being skipped
          COMBINED="{ \"all\": "$ALL_PKGS", \"selected\": "$SELECTED_PKGS" }"
          EXCLUDED=$(echo $COMBINED | jq -c '.all-.selected')

          echo "Will build the following packages:"
          echo "$SELECTED_PKGS"
          echo ""
          echo "Excluded the following packages due the GHC version:"
          echo "$EXCLUDED"

          PKGS_FOR_SH=$(echo "$SELECTED_PKGS" | jq -r '[.[] | "pkg:" + .] | @tsv' | tr '\t' ' ' )
          echo "PKGS=$PKGS_FOR_SH" >> "$GITHUB_ENV"
        shell: bash

      - uses: ./.github/actions/setup-build
        with:
          ghc: ${{ matrix.ghc }}
          os:  ${{ runner.os }}

      - name: Set test options
        # run the tests without parallelism, otherwise tasty will attempt to run
        # all functional test cases simultaneously which causes way too many hls
        # instances to be spun up for the poor github actions runner to handle
        run: |
          echo "TEST_OPTS=-j1 --rerun-update --rerun-filter failures,exceptions" >> $GITHUB_ENV

      - name: Cache test log between attempts of the same run
        uses: actions/cache@v3
        env:
          cache-name: cache-test-log
        with:
          path: "**/.tasty-rerun-log*"
          key: v1-${{ runner.os }}-${{ matrix.ghc }}-test-log-${{ github.sha }}

      - name: Build packages
        run: |
          cabal build $PKGS
        shell: bash

      - if: matrix.test
        name: Test packages
        # For the func and wrapper tests
        env:
          HLS_TEST_EXE: hls
          HLS_WRAPPER_TEST_EXE: hls-wrapper
        run: |
          # We can't just pass the list of packages to cabal here, if any of them
          # don't have tests it will just exit immediately
          for pkg in $PKGS; do
            cabal test $PKG --test-options="$TEST_OPTS"
          done
        shell: bash

  test_post_job:
    if: always()
    runs-on: ubuntu-latest
    needs: [pre_job, test]
    steps:
      - run: |
          echo "jobs info: ${{ toJSON(needs) }}"
      - if: contains(needs.*.result, 'failure')
        run: exit 1
      - if: contains(needs.*.result, 'cancelled') && needs.pre_job.outputs.should_skip != 'true'
        run: exit 1
