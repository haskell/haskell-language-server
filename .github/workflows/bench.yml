name: Benchmark

# See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency.
concurrency:
  group: ${{ github.head_ref }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - '**'

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.1
        with:
          cancel_others: false
          paths_ignore: '["**/docs/**", "**.md", "**/LICENSE", ".circleci/**", "install/**", "**.nix", "**/test/**", "flake.lock", "**/README.md", "FUNDING.yml"]'

  bench_init:
    if: needs.pre_job.outputs.should_skip != 'true'
    needs: pre_job
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ['8.10.7']
        os: [ubuntu-latest]
        cabal: ['3.6']

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - run: git fetch origin master # check the master branch for benchmarking

    - uses: haskell/actions/setup@v1
      with:
        ghc-version  : ${{ matrix.ghc   }}
        cabal-version: ${{ matrix.cabal }}
        enable-stack: false

    - if: runner.os == 'Windows'
      name: (Windows) Platform config
      run: |
        echo "CABAL_STORE_DIR=$SYSTEMDRIVE\\SR" >> $GITHUB_ENV
        echo "CABAL_PKGS_DIR=~\\AppData\\cabal\\packages" >> $GITHUB_ENV
    - if: ( runner.os == 'Linux' ) || ( runner.os == 'macOS' )
      name: (Linux,macOS) Platform config
      run: |
        echo "CABAL_STORE_DIR=~/.cabal/store" >> $GITHUB_ENV
        echo "CABAL_PKGS_DIR=~/.cabal/packages" >> $GITHUB_ENV

    # Needs to be before Cache Cabal so the cache can detect changes to the modified cabal.project file
    - if: matrix.ghc == '9.0.1'
      name: (GHC 9.0.1) Use modified `cabal.project`
      run: |
        cp cabal-ghc901.project cabal.project
    - if: runner.os == 'Windows' && matrix.ghc == '8.8.4'
      name: (Windows,GHC 8.8) Modify `cabal.project` to workaround segfaults
      run: |
        echo "package floskell" >> cabal.project
        echo "  ghc-options: -O0" >> cabal.project

    # Shorten binary names as a workaround for filepath length limits in Windows,
    # but since tests are hardcoded on this workaround -
    # all platforms (in 2021-12-07) need it.
    - name: Workaround shorten binary names
      run: |
        sed -i.bak -e 's/haskell-language-server/hls/g' \
                   -e 's/haskell_language_server/hls/g' \
                   haskell-language-server.cabal cabal.project
        sed -i.bak -e 's/Paths_haskell_language_server/Paths_hls/g' \
                   src/**/*.hs exe/*.hs

    - name: Cache Cabal
      uses: actions/cache@v2
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
        key: v2-${{ runner.os }}-${{ matrix.ghc }}-bench-${{ hashFiles('cabal.project') }}
        restore-keys: |
            v2-${{ runner.os }}-${{ matrix.ghc }}-build-${{ hashFiles('cabal.project') }}
            v2-${{ runner.os }}-${{ matrix.ghc }}-bench-
            v2-${{ runner.os }}-${{ matrix.ghc }}

    - run: cabal update

    # max-backjumps is increased as a temporary solution
    # for dependency resolution failure
    - run: cabal configure --enable-benchmarks --max-backjumps 12000

    - name: Build
      shell: bash
      run: cabal build ghcide:benchHist

    - name: Bench init
      shell: bash
      run: cabal bench ghcide:benchHist  -j --benchmark-options="all-binaries"

    # tar is required to preserve file permissions
    # compression speeds up upload/download nicely
    - name: tar workspace
      shell: bash
      run: tar -czf workspace.tar.gz * .git

    - name: tar cabal
      run: |
        cd ~/.cabal
        tar -czf cabal.tar.gz *

    - name: Upload workspace
      uses: actions/upload-artifact@v2
      with:
        name: workspace
        retention-days: 1
        path: workspace.tar.gz

    - name: Upload .cabal
      uses: actions/upload-artifact@v2
      with:
        name: cabal-home
        retention-days: 1
        path: ~/.cabal/cabal.tar.gz

  bench_example:
    needs: [bench_init, pre_job]
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ['8.10.7']
        os: [ubuntu-latest]
        cabal: ['3.6']
        example: ['cabal', 'lsp-types']

    steps:
    - uses: haskell/actions/setup@v1
      with:
        ghc-version  : ${{ matrix.ghc   }}
        cabal-version: ${{ matrix.cabal }}
        enable-stack: false

    - name: Download cabal home
      uses: actions/download-artifact@v2
      with:
        name: cabal-home
        path: .

    - name: Download workspace
      uses: actions/download-artifact@v2
      with:
        name: workspace
        path: .

    - name: untar
      run: |
        mkdir -p ~/.cabal
        tar xzf workspace.tar.gz
        tar xzf cabal.tar.gz --directory ~/.cabal

    - name: Bench
      shell: bash
      run: cabal bench ghcide:benchHist  -j --benchmark-options="${{ matrix.example }}"

    - name: Display results
      shell: bash
      run: |
        column -s, -t < ghcide/bench-results/unprofiled/${{ matrix.example }}/results.csv | tee ghcide/bench-results/unprofiled/${{ matrix.example }}/results.txt

    - name: Archive benchmarking artifacts
      uses: actions/upload-artifact@v2
      with:
        name: bench-results-${{ runner.os }}-${{ matrix.ghc }}
        path: |
           ghcide/bench-results/results.*
           ghcide/bench-results/**/*.csv
           ghcide/bench-results/**/*.svg
           ghcide/bench-results/**/*.eventlog.html

    - name: Archive benchmark logs
      uses: actions/upload-artifact@v2
      with:
        name: bench-logs-${{ runner.os }}-${{ matrix.ghc }}
        path: |
           ghcide/bench-results/**/*.log
           ghcide/bench-results/**/*.eventlog
           ghcide/bench-results/**/*.hp

  bench_post_job:
    if: always()
    runs-on: ubuntu-latest
    needs: [pre_job, bench_init, bench_example]
    steps:
      - run: |
          echo "jobs info: ${{ toJSON(needs) }}"
      - if: contains(needs.*.result, 'failure')
        run: exit 1
      - if: contains(needs.*.result, 'cancelled')
        name: cancelling
        uses: andymckay/cancel-action@0.2
