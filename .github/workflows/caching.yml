name: Caching

# Docs on the workflow:
# 1. GitHub cache scoping goes:
#   [main branch -> PR main branch -> PR. (essentially in a tree fashion)](https://web.archive.org/web/20211125171853/https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache).
#   Building & keeping caches on `master` allows
#   to share the main project state cache be shared to the whole tree.
# 2. GitHub has a [default 10G cache pool limit](https://web.archive.org/web/20211125171853/https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows#usage-limits-and-eviction-policy) per repo.
#   HLS is a big monorepo codebase, which means easy cache pool
#   invalidation & exhaustion because of the pool limit.
#   To keep caches useful - the main state of the main branch should remain
#   & so keep caching in the repo well below the limit.
#   that means preferring main branch to the PR caches
#   (especially internal branch ones), since PRs from internal branches -
#   count into the repo 10G pool, while that cache gets used only inside of the PR,
#   while exhausting the pool would bork cache for the rest of the community.
#   That is a short story why `dist-newstyle` (especially full) currently is not
#   includded into `master` or PR caches.

defaults:
  run:
    shell: bash

# See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency.
concurrency:
  group: ${{ github.head_ref }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches:
      - master
  schedule:
    # Refresh snapshot every (02+8*x):25 UTC
    # When cache is present it is a light check workflow with early termination.
    # When primary cache is not hit - runs the cache generation.
    # Why: GitHub repo has 10G pool & on overflow GitHub removes caches in FIFO manner.
    # When internal branche PRs save into the same pool -
    #   their cache is accessible only inside of the scope of the PR.
    # If main cache is forced out - there are no cache shared between PRs,
    #   which implies all PRs would start to create & save their cache.
    # Reinstitution of the main chache puts it back into FIFO
    #   & so it gets shared across all PRs.
    - cron: "25 2/8 * * *"

env:
  cabalBuild: "v2-build all --keep-going"

jobs:

  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.1
        with:
          cancel_others: false
          paths_ignore: '["**/docs/**"
                         , "**.md"
                         , "**/LICENSE"
                         , "install/**"
                         , "**.nix"
                         , "flake.lock"
                         , "**/README.md"
                         , "FUNDING.yml"
                         , ".circleci/**"
                         ]'

  caching:
    if: needs.pre_job.outputs.should_skip != 'true'
    needs: pre_job
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        ghc: [ "9.0.1"
             , "8.10.7"
             , "8.10.6"
             , "8.8.4"
             , "8.6.5"
             ]
        os: [ "ubuntu-latest"
            , "macOS-latest"
            , "windows-latest"
            ]

    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/actions/setup-build
        with:
          ghc: ${{ matrix.ghc }}
          os:  ${{ runner.os }}

      - if: steps.compiled-deps.outputs.cache-hit != 'true' && runner.os == 'Linux' && matrix.ghc == '8.10.7'
        name: Download sources for bench
        #  Downloaded separately, to match the tested work/PR workflow guarantees
        run: |
          cabal $cabalBuild --only-download --enable-benchmarks

      - if: steps.compiled-deps.outputs.cache-hit != 'true'
        name: Download the rest of the sources
        #  Downloaded separately, to match the tested work/PR workflow guarantees
        run: |
          cabal $cabalBuild --only-download --enable-tests

      # repeating builds to workaround segfaults in windows and ghc-8.8.4
      # This build agenda in not to have successful code,
      # but to cache what can be cached, so step is fault tolerant & would always succeed.
      # 2021-12-11: NOTE: Need to building all targets (build the project also), since
      # current Cabal does not allow `all --enable-tests --enable-benchmarks --only-dependencies` combination

      - if: steps.compiled-deps.outputs.cache-hit != 'true' && runner.os == 'Linux' && matrix.ghc == '8.10.7'
        name: (For Bench workflow) Build benchmark targets
        continue-on-error: true
        #  Downloaded separately, to match the tested work/PR workflow guarantees
        run: |
          cabal $cabalBuild --enable-benchmarks || cabal $cabalBuild --enable-benchmarks || cabal $cabalBuild --enable-benchmarks

      - if: steps.compiled-deps.outputs.cache-hit != 'true'
        name: Build targets; try 3 times
        continue-on-error: true
        # Done separately, matching the tested work/PR workflow guarantees
        run: |
          cabal $cabalBuild --enable-test || cabal $cabalBuild --enable-test || cabal $cabalBuild --enable-test
