name: Windows

on: [pull_request]
jobs:
  test:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.10.2.2", "8.10.1", "8.6.5"]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-haskell@v1
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: "3.2"
          enable-stack: true

      - run: ./fmt.sh
        name: "HLint via ./fmt.sh"

      - name: Cache Cabal
        uses: actions/cache@v2
        env:
          cache-name: cache-cabal
        with:
          path: ~/.cabal/
          key: ${{ matrix.ghc }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
          restore-keys: |
            ${{ matrix.ghc }}-build-${{ env.cache-name }}-
            ${{ matrix.ghc }}-build-
            ${{ matrix.ghc }}

      - run: cabal update

      # Need this to work around filepath length limits in Windows
      - name: Shorten binary names
        shell: bash
        run: |
          sed -i.bak -e 's/haskell-language-server/hls/g' \
                     -e 's/haskell_language_server/hls/g' \
                     haskell-language-server.cabal
          sed -i.bak -e 's/Paths_haskell_language_server/Paths_hls/g' \
                     src/**/*.hs exe/*.hs

      - name: Build
        shell: bash
        # Retry it three times to workaround compiler segfaults in windows
        run: cabal build || cabal build || cabal build

      - name: Test ghcide
        shell: bash
        # run the tests without parallelism to avoid running out of memory
        run: cabal test ghcide --test-options="-j1 --rerun-update" || cabal test ghcide --test-options="-j1 --rerun" || LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true cabal test ghcide --test-options="-j1 --rerun"

      - name: Test func-test suite
        shell: bash
        env:
          HLS_TEST_EXE: hls
          HLS_WRAPPER_TEST_EXE: hls-wrapper
        # run the tests without parallelism, otherwise tasty will attempt to run
        # all functional test cases simultaneously which causes way too many hls
        # instances to be spun up for the poor github actions runner to handle
        run: cabal test func-test --test-options="-j1 --rerun-update" || cabal test func-test --test-options="-j1 --rerun --rerun-update" || cabal test func-test --test-options="-j1 --rerun" || LSP_TEST_LOG_COLOR=0 LSP_TEST_LOG_MESSAGES=true LSP_TEST_LOG_STDERR=true cabal test func-test --test-options="-j1 --rerun"

      - name: Test wrapper-test suite
        shell: bash
        env:
          HLS_TEST_EXE: hls
          HLS_WRAPPER_TEST_EXE: hls-wrapper
        # run the tests without parallelism, otherwise tasty will attempt to run
        # all functional test cases simultaneously which causes way too many hls
        # instances to be spun up for the poor github actions runner to handle
        run: cabal test wrapper-test --test-options="-j1" || cabal test wrapper-test --test-options="-j1" || cabal test wrapper-test --test-options="-j1"
