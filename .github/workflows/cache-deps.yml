name: Caching of dependencies

#  2021-11-30: NOTE: This workflow currently a trimmed copy of a main `test.yml` workflow. Workflows need further deduplication: https://docs.github.com/en/actions/learn-github-actions/reusing-workflows#overview

defaults:
  run:
    shell: bash

# See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency.
concurrency:
  group: ${{ github.head_ref }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '**'

jobs:

  deps:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        ghc: ["9.0.1", '8.10.7', '8.10.6', "8.8.4", "8.8.3", "8.6.5"]
        cabal: ["3.6"]
        os: [ubuntu-latest, macOS-latest, windows-latest]
        exclude:
          - os: windows-latest
            ghc: '8.8.3'

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: haskell/actions/setup@v1
        id: HaskEnvSetup
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}

      - if: runner.os == 'Windows'
        name: (Windows) Platform config
        run: |
          echo "CABAL_PKGS_DIR=~\\AppData\\cabal\\packages" >> $GITHUB_ENV

      - if: ( runner.os == 'Linux' ) || ( runner.os == 'macOS' )
        name: (Linux,macOS) Platform config
        run: |
          echo "CABAL_PKGS_DIR=~/.cabal/packages" >> $GITHUB_ENV

      # Needs to be before Cache Cabal so the cache can detect changes to the modified cabal.project file
      - if: matrix.ghc == '9.0.1'
        name: (GHC 9.0.1) Use modified `cabal.project`
        run: cp cabal-ghc901.project cabal.project

      - if: runner.os == 'Windows' && matrix.ghc == '8.8.4'
        name: (Windows,GHC 8.8) Modify `cabal.project` to workaround segfaults
        run: |
          echo "package floskell" >> cabal.project
          echo "  ghc-options: -O0" >> cabal.project

      # Work around for filepath length limits in Windows
      - if: runner.os == 'Windows'
        name: (Windows) Shorten binary names
        run: |
          sed -i.bak -e 's/haskell-language-server/hls/g' \
                     -e 's/haskell_language_server/hls/g' \
                     haskell-language-server.cabal cabal.project
          sed -i.bak -e 's/Paths_haskell_language_server/Paths_hls/g' \
                     src/**/*.hs exe/*.hs

      - name: Retrieving `cabal.project` Hackage timestamp
        run: |
          TIMESTAMP="$(grep index-state cabal.project)"
          echo "HACKAGE_TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

      # 2021-12-02: NOTE: Cabal Hackage source tree storage does not depend on OS or GHC really,
      # but can depend on `base`.
      # But this caching is happens only inside `master` for `master` purposes of compiling the deps
      # so having a shared pool here that depends only on Hackage pin & does not depend on `base` is "good enough"
      # & used such because it preserves 10% of a global cache storage pool.
      - name: Hackage sources cache
        uses: actions/cache@v2
        env:
          cache-name: hackage-sources
        with:
          path: ${{ env.CABAL_PKGS_DIR }}
          key:          ${{ env.cache-name }}-${{ env.HACKAGE_TIMESTAMP }}
          restore-keys: ${{ env.cache-name }}-

      - run: cabal v2-update

      - name: Compiled deps cache
        uses: actions/cache@v2
        env:
          cache-name: compiled-deps
        with:
          path: ${{ steps.HaskEnvSetup.outputs.cabal-store }}
          key:  ${{ env.cache-name }}-${{ runner.os }}-${{ matrix.ghc }}-${{ env.HACKAGE_TIMESTAMP }}-${{ hashFiles('cabal.project') }}
          restore-keys: |
                ${{ env.cache-name }}-${{ runner.os }}-${{ matrix.ghc }}-${{ env.HACKAGE_TIMESTAMP }}-
                ${{ env.cache-name }}-${{ runner.os }}-${{ matrix.ghc }}-
                ${{ env.cache-name }}-${{ runner.os }}-

      - if: ( runner.os != 'Windows' ) && ( matrix.ghc != '8.6.5' )
        name: Build
        #  2021-12-02: NOTE: After HLS Cabal 3.6 support - add:
        #
        #  cabal v2-build --enable-tests --enable-benchmarks --only-download
        #  # ^ To download deps for everything.
        run: |
          cabal v2-build --enable-tests --enable-benchmarks --only-dependencies
          # ^ To target build only deps.

      # repeating builds to workaround segfaults in windows and ghc-8.8.4
      # separate build steps for platforms are needed because if Windows build aborts once - it returns the error code but despite how it is on other platforms - repeated compilation may succeed.
      - if: runner.os == 'Windows'  && ( matrix.ghc != '8.6.5' )
        name: (Windows) Restart build 3 times
        run: cabal v2-build --enable-tests --enable-benchmarks --only-dependencies || cabal v2-build --enable-tests --enable-benchmarks --only-dependencies || cabal v2-build --enable-tests --enable-benchmarks --only-dependencies

      - if: ( runner.os != 'Windows' ) && ( matrix.ghc == '8.6.5' )
        name: Build
        run: cabal v2-build --only-dependencies

      - if: ( runner.os == 'Windows' ) && ( matrix.ghc == '8.6.5' )
        name: Build
        run: cabal v2-build --only-dependencies || cabal v2-build --only-dependencies || cabal v2-build --only-dependencies
